#NOTE:
#Định nghĩa CA
#CA là viết tắt của từ Certificate Authority nghĩa là một tổ chức hoặc đơn vị có trách nhiệm cấp phát, quản lý và xác minh tính chính xác của các chứng chỉ số (digital certificates).
#Chứng chỉ số (Digital Certificates) là một tài liệu điện tử dùng để xác định danh tính của một cá nhân, một tổ chức hoặc một thiết bị trong một mạng máy tính.

#Các tham số viết tắt khi tạo Certificates
#"C" (Country): đại diện cho mã quốc gia (country code) của quốc gia mà CA đó đặt tại.
#"L" (Locality): đại diện cho thành phố hoặc vùng địa lý (locality) mà CA đó đặt tại.
#"O" (Organization): đại diện cho tên tổ chức (organization name) hoặc công ty mà CA đó đại diện.
#"OU" (Organizational Unit): đại diện cho tên đơn vị tổ chức (organizational unit name) bên trong tổ chức hoặc công ty mà CA đó đại diện.
#"ST" (State or Province): đại diện cho tên tiểu bang hoặc tỉnh (state or province) mà CA đó đặt tại.

#REFERENCE: https://etcd.io/docs/v3.5/

#Install on Local Linux Ubuntu
#Generate TLS certificates
#Download required binaries

{

VERSION=$(curl --silent "https://api.github.com/repos/cloudflare/cfssl/releases/latest" | grep '"tag_name"' | sed -E 's/.*"([^"]+)".*/\1/')
VNUMBER=${VERSION#"v"}
wget https://github.com/cloudflare/cfssl/releases/download/${VERSION}/cfssl_${VNUMBER}_linux_amd64 -O cfssl
chmod +x cfssl
sudo mv cfssl /usr/local/bin

VERSION=$(curl --silent "https://api.github.com/repos/cloudflare/cfssl/releases/latest" | grep '"tag_name"' | sed -E 's/.*"([^"]+)".*/\1/')
VNUMBER=${VERSION#"v"}
wget https://github.com/cloudflare/cfssl/releases/download/${VERSION}/cfssljson_${VNUMBER}_linux_amd64 -O cfssljson
chmod +x cfssljson
sudo mv cfssljson /usr/local/bin
cfssljson -version

}

#Create a Certificate Authority (CA)

{

mkdir cert && cd cert
cat > ca-config.json <<EOF
{
    "signing": {
        "default": {
            "expiry": "8760h"
        },
        "profiles": {
            "etcd": {
                "expiry": "8760h",
                "usages": ["signing", "key encipherment", "server auth","client auth"]
            }
        }
    }
} 
EOF

cat > ca-csr.json <<EOF
{
    "CN": "etcd cluster",
    "Key": {
      "algo": "rsa",
      "size": 2048
    },
    "names": [
      {
        "C": "VN",
        "L": "Ho_Chi_Minh",
        "O": "FPT_Telecom",
        "OU": "CSOC_ETCD_CA",
        "ST": "District_7"
      }
    ]
}
EOF

cfssl gencert -initca ca-csr.json | cfssljson -bare ca

}

#Create TLS certificates

{

export ETCD1_IP="10.10.10.17"
export ETCD2_IP="10.10.10.18"

cat > etcd-csr.json <<EOF
{
    "CN": "etcd",
    "hosts": [
        "localhost",
        "127.0.0.1",
        "${ETCD1_IP}",
        "${ETCD2_IP}"
    ],
    "key": {
      "algo": "rsa",
      "size": 2048
    },
    "names": [
      {
        "C": "VN",
        "L": "Ho_Chi_Minh",
        "O": "FPT_Telecom",
        "OU": "CSOC_ETCD_TLS",
        "ST": "District_7"
      }
    ]
}
EOF

cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=etcd etcd-csr.json | cfssljson -bare etcd

}

#Copy the certificates to etcd nodes

{

declare -a NODES=(10.10.10.17 10.10.10.18)

for node in ${NODES[@]}; do
  scp ca.pem etcd.pem etcd-key.pem root@$node: 
done

}

#Install on all etcd nodes
#Copy the certificates to a standard location

{

  mkdir -p /etc/etcd/pki
  mv ca.pem etcd.pem etcd-key.pem /etc/etcd/pki/
  ls -l /etc/etcd/pki
  mkdir -p /var/lib/etcd/
  chown -R root:root /var/lib/etcd/

}

#Download etcd & etcdctl binaries from Github

{

wget https://github.com/etcd-io/etcd/releases/download/v3.5.7/etcd-v3.5.7-linux-amd64.tar.gz
tar -zvxf etcd-v3.5.7-linux-amd64.tar.gz
cp etcd-v3.5.7-linux-amd64/etcd /usr/local/bin/
cp etcd-v3.5.7-linux-amd64/etcdctl /usr/local/bin/
rm -rf etcd*

}

#Create systemd unit file for etcd service

{

NODE_IP="10.10.10.17"

ETCD_NAME=$(hostname -s)

ETCD1_IP="10.10.10.17"
ETCD2_IP="10.10.10.18"

cat > /etc/systemd/system/etcd.service <<EOF
[Unit]
Description=etcd
After=network.target

[Service]
Type=notify
WorkingDirectory=/var/lib/etcd/
ExecStart=/usr/local/bin/etcd
  --name ${ETCD_NAME} \\
  --cert-file=/etc/etcd/pki/etcd.pem \\
  --key-file=/etc/etcd/pki/etcd-key.pem \\
  --peer-cert-file=/etc/etcd/pki/etcd.pem \\
  --peer-key-file=/etc/etcd/pki/etcd-key.pem \\
  --trusted-ca-file=/etc/etcd/pki/ca.pem \\
  --peer-trusted-ca-file=/etc/etcd/pki/ca.pem \\
  --peer-client-cert-auth \\
  --initial-advertise-peer-urls https://${NODE_IP}:2380 \\
  --listen-peer-urls https://${NODE_IP}:2380 \\
  --advertise-client-urls https://${NODE_IP}:2379 \\
  --listen-client-urls https://${NODE_IP}:2379,https://127.0.0.1:2379 \\
  --initial-cluster-token csoc-nghiahl \\
  --initial-cluster k8s-etcd1=https://${ETCD1_IP}:2380,k8s-etcd2=https://${ETCD2_IP}:2380 \\
  --initial-cluster-state new
Restart=on-failure
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

}

#Enable and Start etcd service

{
  systemctl daemon-reload
  systemctl enable --now etcd && systemctl status etcd
}

#Verify Etcd cluster status

ETCDCTL_API=3 etcdctl \
  --endpoints=https://127.0.0.1:2379 \
  --cacert=/etc/etcd/pki/ca.pem \
  --cert=/etc/etcd/pki/etcd.pem \
  --key=/etc/etcd/pki/etcd-key.pem \
  member list

#Better to export these as environment variables and connect to the clutser instead of a specific node

export ETCDCTL_API=3 
export ETCDCTL_ENDPOINTS=https://10.10.10.17:2379,https://10.10.10.18:2379
export ETCDCTL_CACERT=/etc/etcd/pki/ca.pem
export ETCDCTL_CERT=/etc/etcd/pki/etcd.pem
export ETCDCTL_KEY=/etc/etcd/pki/etcd-key.pem

#And now its a lot easier

etcdctl member list
etcdctl endpoint status
etcdctl endpoint health
curl -L http://localhost:2379/health | grep -v debugging
journalctl -xe -u etcd.service
